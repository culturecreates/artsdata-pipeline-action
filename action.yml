name: 'Custom Artsdata Pipeline Action'
description: 'A custom action for the Artsdata pipeline'

inputs:
  mode: 
    description: 'Mode of the action(fetch/push/fetch-push)'
    required: true
    default: 'push'
  page-url:
    description: 'URLs of the page to crawl'
  entity-identifier:
    description: 'Identifiers of the entity to fetch'
  downloadFile:
    description: 'Name of the file to download with extension'
  downloadUrl:
    description: 'URL of the file to download'
  is-paginated:
    description: 'Whether the page is paginated'
    default: 'false'
  headless:
    description: 'Whether to run in headless mode'
    default: 'false'
  artifact:
    description: 'Name of the artifact'
  token:
    description: 'GitHub token'
  publisher:
    description: 'URI of the publisher'
  comment:
    description: 'Comment'
  group:
    description: 'Group of artifacts/versions. Typically the name of the tool creating the artifact. Use unreserved characters.'
  version:
    description: 'Version of the artifact. Usually a date. For example: 2020-10-23. Use unreserved characters.'
  reportCallbackUrl:
    description: 'URL to send back the data validation report asynchronously using POST "Content-Type: application/json"'
  shacl:
    description: 'URL to the SHACL file'
  fetch-urls-headlessly:
    description: 'Set as true to fetch the entity URLs headlessly'
  offset:
    description: 'Offset for paginated pages'
  custom-user-agent:
    description: 'Custom user agent string'

runs: 
  using: 'composite'
  steps:
    - name: log the tag
      run: git describe --tags
      
    - name: Check out the repository
      uses: actions/checkout@v3

    - name: Check mode requirements
      run: |
        if [[ "${{ inputs.mode }}" == "fetch" || "${{ inputs.mode }}" == "fetch-push" ]]; then
          if [[ -z "${{ inputs.page-url }}" ]]; then
            echo "Page URL is required for ${{ inputs.mode }} mode."
            exit 1
          fi

          if [[ -z "${{ inputs.entity-identifier }}" ]]; then
            echo "Entity Identifier is required for ${{ inputs.mode }} mode."
            exit 1
          fi

          if [[ -z "${{ inputs.token }}" ]]; then
            echo "Token is required for ${{ inputs.mode }} mode."
            exit 1
          fi
        fi

        if [[ "${{ inputs.mode }}" == "push" || "${{ inputs.mode }}" == "fetch-push" ]]; then
          if [[ -z "${{ inputs.artifact }}" ]]; then
            echo "Artifact is required for ${{ inputs.mode }} mode."
            exit 1
          fi

          if [[ -z "${{ inputs.publisher }}" ]]; then
            echo "Publisher is required for ${{ inputs.mode }} mode."
            exit 1
          fi
        fi

        if [[ "${{ inputs.mode }}" == "push" ]]; then
          if [[ -z "${{ inputs.downloadUrl }}" ]]; then
            echo "Download URL is required for push mode."
            exit 1
          fi
        fi

      shell: bash

    - name: Fetch Data using Docker
      if: ${{ inputs.mode == 'fetch' || inputs.mode == 'fetch-push' }}
      run: |
        isPaginated=${{ inputs.is-paginated || 'false' }}
        headless=${{ inputs.headless || 'false' }}
        fetchUrlsHeadlessly=${{ inputs.fetch-urls-headlessly || 'false' }}
        offset=${{ inputs.offset || '1' }}
        downloadFile="${{ inputs.downloadFile || format('{0}.jsonld', inputs.artifact) }}"
        customUserAgent=${{ inputs.custom-user-agent }}

        docker pull ghcr.io/culturecreates/artsdata-pipeline-action/artsdata-rdf-fetcher:latest
        docker run --shm-size=1g -v $(pwd)/output:/usr/src/app/output ghcr.io/culturecreates/artsdata-pipeline-action/artsdata-rdf-fetcher:latest \
          "${{ inputs.page-url }}" \
          "${{ inputs.entity-identifier }}" \
          "output/${downloadFile}" \
          "$isPaginated" \
          "$headless" \
          "$fetchUrlsHeadlessly" \
          "$offset" \
          "$customUserAgent"

      shell: bash

    - name: Commit and Push Changes
      if: ${{ inputs.mode == 'fetch' || inputs.mode == 'fetch-push' }}
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git pull
        git add "output/${{ inputs.file_name }}"
        git commit -m "Add data generated by the script"
        git push
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: Push to Artsdata
      if: ${{ inputs.mode == 'push' || inputs.mode == 'fetch-push' }}
      run: |
        artifact=${{ inputs.artifact }}
        publisher=${{ inputs.publisher }}
        downloadFile="${{ inputs.downloadFile || format('{0}.jsonld', inputs.artifact) }}"
        repo=${{ github.repository }}
        ref=${{ github.ref }}
        group=${{ inputs.group }}
        version=${{ inputs.version }}
        comment=${{ inputs.comment }}
  
        if [[ "${{ inputs.mode }}" == "push" ]]; then
          downloadUrl=${{ inputs.downloadUrl }}
        else
          downloadUrl="https://raw.githubusercontent.com/${repo}/${ref}/output/${downloadFile}"
        fi

        group=${group:-${repo#*/}}
        version=${version:-$(date +%Y-%m-%dT%H:%M:%S | sed 's/:/_/g')}
        comment=${comment:-"Published by ${group} on ${version}"}

        data=$(jq -n \
        --arg artifact "$artifact" \
        --arg publisher "$publisher" \
        --arg group "$group" \
        --arg version "$version" \
        --arg downloadUrl "$downloadUrl" \
        --arg downloadFile "$downloadFile" \
        --arg comment "$comment" \
        '{
          artifact: $artifact,
          publisher: $publisher,
          group: $group,
          version: $version,
          downloadUrl: $downloadUrl,
          downloadFile: $downloadFile,
          comment: $comment
        }'
        )

        echo "Data: $data"

        response=$(curl -s -w "%{http_code}" -o response.txt -X POST http://api.artsdata.ca/databus/ \
        -H "Content-Type: application/json" \
        -d "$data")

        if [[ "$response" -ne 200 ]]; then
        echo "Error: $(cat response.txt)"
        else
        echo "Success: Data posted successfully."
        fi
      shell: bash
